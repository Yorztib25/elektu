class Colours{constructor(){this.reset()}reset(){this.colour=["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"]}getNoTeamColour(){return"#C0C0C0"}getRandomColour(){return this.colour.splice(Math.floor(Math.random()*this.colour.length),1)[0]}add(a){this.colour.push(a)}}class PlayerTouch{constructor(a,b,c,d,e){var f=Math.PI;this.radius=20,this.outerCircleStrokeWidth=10,this.x=a,this.y=b,this.id=c,this.colour=d,this.isLocked=!1,this.state=this.touchState.creation,this.number=-1,this.grow=1,this.outerCircleStartAngle=2*Math.random()*f,this.outerCircleEndAngle=this.outerCircleStartAngle,this.isSelected=!1,this.surroundingCircleRadius=1020,this.step=0,this.timeoutStarted=-1,this.timeoutCircleStartAngle=2*Math.random()*f,this.timeoutCircleEndAngle=this.timeoutCircleStartAngle,this.timeoutDuration=e,this.timeoutColor=d+"7F"}touchState={creation:0,selected:1,onlySelected:2,normal:3,obsolete:4};moveTo(a,b){this.isLocked||(this.x=a,this.y=b)}computeOuterCircle(){var a=Math.PI;this.outerCircleEndAngle-this.outerCircleStartAngle>=2*a||this.state===this.touchState.onlySelected||this.state===this.touchState.selected?(this.outerCircleStartAngle=0,this.outerCircleEndAngle=2*a):(this.outerCircleStartAngle+=.08,this.outerCircleEndAngle+=.24)}update(a){var b=Math.PI;switch(this.state){case this.touchState.creation:40<=this.radius?this.state=this.touchState.normal:this.radius+=5;break;case this.touchState.deletion:this.radius-=5,0>=this.radius&&(this.radius=0,this.state=this.touchState.obsolete),this.timeoutStarted=-1;break;case this.touchState.onlySelected:this.surroundingCircleRadius>this.radius+60&&(this.surroundingCircleRadius-=50),this.timeoutStarted=-1;break;case this.touchState.selected:this.timeoutStarted=-1;break;default:if(this.step++,4<=this.step&&(this.step=0,37>=this.radius?this.grow=.5:42<=this.radius&&(this.grow=-.5),this.radius+=this.grow),-1!==this.timeoutStarted&&a>this.timeoutStarted){const c=2*((a-this.timeoutStarted)/this.timeoutDuration*b);this.timeoutCircleStartAngle+=.04,this.timeoutCircleEndAngle=this.timeoutCircleStartAngle+c}}this.computeOuterCircle()}startTimer(a){this.timeoutStarted=a}drawTouch(a){a.beginPath(),a.arc(this.x,this.y,this.radius,0,2*Math.PI),a.fill(),a.closePath(),a.beginPath(),a.arc(this.x,this.y,this.radius+12,this.outerCircleStartAngle,this.outerCircleEndAngle),a.lineWidth=this.outerCircleStrokeWidth,a.stroke(),a.closePath()}draw(a){this.state===this.touchState.obsolete||(a.fillStyle=this.colour,a.strokeStyle=this.colour,this.state===this.touchState.onlySelected&&(a.rect(0,0,a.canvas.clientWidth,a.canvas.clientHeight),a.fill(),a.globalCompositeOperation="xor",a.beginPath(),a.arc(this.x,this.y,this.surroundingCircleRadius,0,2*Math.PI),a.fill(),a.closePath()),this.drawTouch(a),-1!==this.number&&a.fillText(this.number,this.x,this.y-65),-1!==this.timeoutStarted&&(a.strokeStyle=this.timeoutColor,a.beginPath(),a.arc(this.x,this.y,this.radius+4,this.timeoutCircleStartAngle,this.timeoutCircleEndAngle),a.lineWidth=9,a.stroke(),a.closePath()))}flagForDelete(){this.state=this.touchState.deletion,this.id=-1}}class Feature{constructor(){this.featureType={select:0,teams:1,ordinate:2},this.type=this.featureType.select}set(a){"select"===a?this.type=this.featureType.select:"teams"===a?this.type=this.featureType.teams:"ordinate"===a?this.type=this.featureType.ordinate:void 0}shouldTimerStart(a,b){switch(this.type){case this.featureType.select:return a>b;case this.featureType.teams:return a>=b;case this.featureType.ordinate:return 1<a;}}}class Elektu{constructor(a){const b=()=>{this.canvas.addEventListener("touchstart",this.newTouch),this.canvas.addEventListener("touchend",this.touchEnd),this.canvas.addEventListener("touchmove",this.handleTouchMove.bind(this)),this.canvas.addEventListener("touchcancel",this.touchEnd)};this.colours=new Colours,this.touches=[],this.canvas=a,this.ctx=a.getContext("2d"),this.timerTrigger=-1,this.displayTimeout=1500,this.triggerTimeout=2500,this.finishTouchEnd=this.handleFinishTouchEnd.bind(this),this.touchEnd=this.handleTouchEnd.bind(this),this.newTouch=this.handleNewTouch.bind(this),this.selectedNumber=1,this.vibrate=!1,this.lastUpdateTimestamp=0,this.feature=new Feature,b()}add(a,b,c){let d=this.feature.type===this.feature.featureType.teams?this.colours.getNoTeamColour():this.colours.getRandomColour();this.touches.push(new PlayerTouch(a,b,c,d,this.triggerTimeout))}remove(a){this.getTouch(a)?.flagForDelete()}touchesLength(){let a=0;for(const b of this.touches)b.state!==b.touchState.deletion&&b.state!==b.touchState.obsolete&&++a;return a}setVibrate(a){this.vibrate=a}setSelectedNumber(a){this.selectedNumber=a}areAllTouchesLocked(){for(const a of this.touches)if(!a.isLocked)return!1;return!0}update(a){this.lastUpdateTimestamp=a;for(const b of this.touches)b.update(a);this.touches.forEach((a,b)=>{a.state===a.touchState.obsolete&&(this.feature.type!==this.feature.featureType.teams&&this.colours.add(a.colour),this.touches.splice(b,1))})}move(a,b,c){this.getTouch(a)?.moveTo(b,c)}reset(){this.touches=[],this.colours.reset(),this.ctx.globalCompositeOperation="source-over",clearTimeout(this.timerTrigger),clearTimeout(this.resetAllTimeout),this.canvas.removeEventListener("touchstart",this.ignoreEvent),this.canvas.removeEventListener("touchmove",this.ignoreEvent),this.canvas.removeEventListener("touchend",this.ignoreEvent),this.canvas.removeEventListener("touchend",this.finishTouchEnd),this.canvas.removeEventListener("touchcancel",this.ignoreEvent),this.canvas.removeEventListener("touchcancel",this.finishTouchEnd),this.canvas.addEventListener("touchstart",this.newTouch),this.canvas.addEventListener("touchend",this.touchEnd),this.canvas.addEventListener("touchcancel",this.touchEnd)}draw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);for(const a of this.touches)a.draw(this.ctx)}getTouch(a){for(const b of this.touches)if(a===b.id)return b;return null}resetTimerTrigger(){if(clearTimeout(this.timerTrigger),this.feature.shouldTimerStart(this.touchesLength(),this.selectedNumber)){this.timerTrigger=setTimeout(this.triggerSelection.bind(this),this.triggerTimeout);for(const a of this.touches)a.startTimer(this.lastUpdateTimestamp)}else for(const a of this.touches)a.startTimer(-1)}triggerSelection(){var a=Math.floor;const b=()=>{this.canvas.removeEventListener("touchstart",this.newTouch),this.canvas.addEventListener("touchstart",this.ignoreEvent),this.canvas.removeEventListener("touchend",this.touchEnd),this.canvas.addEventListener("touchend",this.finishTouchEnd),this.canvas.removeEventListener("touchcancel",this.touchEnd),this.canvas.addEventListener("touchcancel",this.finishTouchEnd)},c=b=>{for(let c,d,e=b.length;0!==e;)c=a(Math.random()*e),e-=1,d=b[e],b[e]=b[c],b[c]=d;return b},d=()=>{const a=[...this.touches].map(a=>a.id);return c(a)},e=a=>{const b=d();b.forEach((b,c)=>{if(c<a){const c=this.getTouch(b);c&&(c.isSelected=!0,c.state=1===a?c.touchState.onlySelected:c.touchState.selected)}else this.remove(b)})},f=b=>{const d=[...this.touches].map(a=>a.id);if(b>d.length)throw new RangeError("selectTeams: more elements taken than available");const e=((b,c)=>{var d=Math.ceil;const e=b.length,f=[];let g=0;if(0==e%c)for(const d=a(e/c);g<e;)f.push(b.slice(g,g+=d));else for(;g<e;){const a=d((e-g)/c--);f.push(b.slice(g,g+=a))}return f})(c(d),b);for(const a of e){const b=this.colours.getRandomColour();for(const c of a){const a=this.getTouch(c);a&&(a.colour=b,a.state=a.touchState.selected)}}},g=()=>{const a=d();a.forEach((a,b)=>{const c=this.getTouch(a);c&&(c.number=b+1,c.state=c.touchState.selected)})};switch(clearTimeout(this.timerTrigger),this.feature.type){case this.feature.featureType.select:e(this.selectedNumber);break;case this.feature.featureType.teams:f(this.selectedNumber);break;case this.feature.featureType.ordinate:g();break;default:throw new Error("Unrecognised feature type.");}this.vibrate&&window.navigator.vibrate([50,10,50]),b()}ignoreEvent(a){a.preventDefault()}handleNewTouch(a){a.preventDefault();for(const b of a.changedTouches)this.add(b.clientX,b.clientY,b.identifier);this.resetTimerTrigger()}handleTouchMove(a){a.preventDefault();for(const b of a.changedTouches)this.move(b.identifier,b.clientX,b.clientY)}handleTouchEnd(a){a.preventDefault();for(const b of a.changedTouches)this.remove(b.identifier);this.resetTimerTrigger()}handleFinishTouchEnd(a){a.preventDefault();for(const b of a.changedTouches){let a=this.getTouch(b.identifier);a&&(a.isLocked=!0)}this.areAllTouchesLocked()&&setTimeout(this.reset.bind(this),this.displayTimeout)}}